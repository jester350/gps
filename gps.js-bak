const express = require('express');
const app = express();
const { engine } = require('express-handlebars');
const bodyParser = require('body-parser');
const { Pool } = require('pg');
const port = 8000;
// Database connection configuration
const pool = new Pool({
    user: 'postgres',
    host: 'localhost',
    database: 'gps',
    password: 'Fugazi3077!',
    port: 5432,
});

app.engine('handlebars', engine());
app.set('view engine', 'handlebars');
app.set('views', './views');
app.use(express.static('public'));
const morgan = require('morgan');
app.use(morgan('combined'));

// Middleware to parse JSON bodies
app.use(bodyParser.json());

// Simple token-based authentication middleware
const tokenMiddleware = (req, res, next) => {
    const authHeader = req.headers.authorization;
    const token = authHeader && authHeader.split(' ')[1];

    // Replace 'your_secret_token' with your actual secret token
    if (token == null || token !== 'judys_hot_ass') {
        return res.status(401).json({ error: 'Unauthorized' });
    }

    next(); // Proceed to the next middleware or route handler
};

// Route to receive GPS coordinates, now protected with tokenMiddleware
app.post('/gps', tokenMiddleware, async (req, res) => {
    const { timestamp, latitude, longitude, altitude, speed, acu, gmap } = req.body;
 try {
    const result = await pool.query(
      'INSERT INTO gps_site_gps (time, latitude, longitude,altitude, speed, acu, gmap) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *',
      [timestamp, latitude, longitude,altitude, speed, acu, gmap] // Use the provided timestamp
    );
    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error(error);
    res.status(500).send('Error saving location data');
  }
});

app.get('/locations', async (req, res) => {
    console.log("BOOBS")
    try {
        const result = await pool.query('SELECT * FROM gps_site_gps ORDER BY time DESC');
        res.render('locations', { locations: result.rows });
    } catch (error) {
        console.error(error);
        res.status(500).send('Error retrieving location data');
    }
});

app.get('/currenttime', (req, res) => {
  // Get the current date and time
  const now = new Date().toLocaleString(); // Adjust the format as needed

  // Send the current date and time as a response
  res.send(`Current Date and Time: ${now}`);
});

app.listen(port,'0.0.0.0', () => {
    console.log(`GPS ass listening at http://localhost:${port}`);
});
